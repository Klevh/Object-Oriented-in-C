#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>

/* Classes object */
struct Class{
	size_t size;
	void * (*ctor)(void * self,va_list args);
	void * (*dtor)(void * self);
	void * (*clon)(const void * self);
	int (*equals)(const void * self, const void * other);
	char * (*toString)(const void * self);
};

void * new(const void * type, ...);
void * delete(void * self);
void * clone(void * _self);
/* ------------- */

/* Coord class */
struct Coord{
	const void * class;
	int x;
	int y;
};

void * Coord_ctor(void * _self, va_list ap);
int getX(void * self);
int getY(void * self);

static const struct Class _Coord = {
	sizeof(struct Coord),
	Coord_ctor, NULL,NULL,NULL
};
const void * Coord = &_Coord;
/* ------------- */
	
/* Class Coord3D (inherit from Coord) */
struct Coord3D{
	struct Coord coord;
	int z;
};

void * Coord3D_ctor(void * _self, va_list ap);
int getZ(void * self);

static const struct Class _Coord3D = {
	sizeof(struct Coord3D),
	Coord3D_ctor, NULL,NULL,NULL
};
const void * Coord3D=&_Coord3D;
/* ------------- */

int main()
{
	void * coord = new(Coord,0,3);
	void * coord3D = new(Coord3D,0,2,5);
	
	printf("2D : %d %d\n",getX(coord),getY(coord));
	printf("3D : %d %d %d\n",getX(coord3D),getY(coord3D),getZ(coord3D));
	
	delete(coord);
	delete(coord3D);
	
	return 0;
}

/* Coord3D implementation */
void * Coord3D_ctor(void * _self, va_list ap){
	struct Coord3D * self = Coord_ctor(_self,ap);
	self->z=va_arg(ap,int);
	return (void *)self;
}

int getZ(void * self){
	return ((struct Coord3D *)self)->z;
}

/* Coord implementation */
void * Coord_ctor(void * _self, va_list ap){
	struct Coord * self=_self;
	self->x=va_arg(ap,int);
	self->y=va_arg(ap,int);
	return (void *) self;
}

int getX(void * self){
	return ((struct Coord *)self)->x;
}

int getY(void * self){
	return ((struct Coord *)self)->y;
}
/* -------------- */
	
/* Class implementation */
void * new(const void * type, ...){
	const struct Class * class = type;
	void * p = calloc(1, class->size);
	
	*(const struct Class **)p=class;
	
	if(class->ctor){
		va_list l;
		va_start(l, type);
		
		p = class->ctor(p, l);
		va_end(l);
	}
	
	return p;
}

void * delete(void *self){
	const struct Class ** cp = self;
	
	if(self && *cp && (*cp)->dtor){
		self=(*cp)->dtor(self);
	}
	
	free(self);
}

void * clone(void *_self){
	const struct Class **cp = _self;
	void * p = calloc(1,(*cp)->size);
	
	*(const struct Class **)p=*cp;
	
	if(_self && *cp && (*cp)->clon){
		p=(*cp)->clon(_self);
	}

	return p;
}
/* ------------ */
